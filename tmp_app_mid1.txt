        <h3 id="favicon-modal-title">\u062A\u0646\u0638\u06CC\u0645 \u0641\u0627\u0648\u0622\u06CC\u06A9\u0648\u0646 (\u0628\u0631\u0634 1:1)</h3>
        <div class="form">
          <label class="field">
            <span>${STR_PICK_IMAGE}</span>
            <input type="file" id="favicon-file" accept="image/*" />
          </label>
          <div class="cropper-wrap">
            <canvas id="favicon-canvas" width="256" height="256" aria-label="\u0646\u0627\u062D\u06CC\u0647 \u0628\u0631\u0634"></canvas>
          </div>
          <label class="field">
            <span>${STR_ZOOM}</span>
            <input type="range" id="favicon-zoom" min="0.5" max="3" step="0.01" value="1" />
          </label>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn" id="favicon-cancel">${STR_CANCEL}</button>
          <button type="button" class="btn primary" id="favicon-save">${STR_SAVE}</button>
        </div>
        <p id="favicon-msg" class="hint"></p>
      </div>`;
    document.body.appendChild(modal);
  }

  function initLogic(){
    ensureStyles();
    ensureSidebarFavicon();
    injectDevTab();
    injectFaviconModal();

    // Load persisted title and favicon
    const storedTitle = localStorage.getItem(SITE_TITLE_KEY);
    if (storedTitle) applyTitle(storedTitle);
    else {
      const def = document.querySelector('.sidebar .title')?.textContent?.trim() || '';
      if (def) applyTitle(def);
    }
    const fav = localStorage.getItem(FAVICON_KEY);
    if (fav) applyFavicon(fav);

    // Initialize time-offset input
    // Default timezone if missing
    if (!localStorage.getItem(TIMEZONE_KEY)) localStorage.setItem(TIMEZONE_KEY, 'Asia/Tehran');
    // Hook title input
    document.addEventListener('input', (e) => {
      const t = e.target;
      if (t && t.id === 'site-title'){
        const val = String(t.value || '').trim();
        localStorage.setItem(SITE_TITLE_KEY, val);
        applyTitle(val);
      }
    });
    // Timezone change
    document.addEventListener('change', (e)=>{
      const t = e.target;
      if (t && t.id === 'timezone-select'){
        const tz = t.value || 'Asia/Tehran';
        localStorage.setItem(TIMEZONE_KEY, tz);
        // also cache offset minutes for compatibility
        try {
          const parts = new Intl.DateTimeFormat('en-US',{ timeZone: tz, timeZoneName:'shortOffset'}).formatToParts(new Date());
          const v = parts.find(p=>p.type==='timeZoneName')?.value || '';
          const m = v.match(/^GMT([+-])(\d{1,2})(?::(\d{2}))?$/);
          if (m){
            const sign = m[1] === '-' ? -1 : 1;
            const hh = parseInt(m[2],10); const mm = parseInt(m[3]||'0',10);
            const minutes = sign*(hh*60+mm);
            localStorage.setItem(TIME_OFFSET_KEY, String(minutes));
          }
        } catch {}
        renderClock();
      }
    });

    // Favicon modal logic
    const openBtn = document.getElementById('open-favicon-modal');
    const modal = document.getElementById('favicon-modal');
    const fileInput = document.getElementById('favicon-file');
    const canvas = document.getElementById('favicon-canvas');
    const zoom = document.getElementById('favicon-zoom');
    const ctx = canvas ? canvas.getContext('2d') : null;
    let img = new Image();
    let hasImage = false;
    let baseScale = 1;
    let scale = 1;
    let offsetX = 0, offsetY = 0;
    let dragging = false; let lastX = 0, lastY = 0;

    function clearCanvas(){ if (!ctx) return; ctx.clearRect(0,0,canvas.width,canvas.height); ctx.fillStyle='#ffffff'; ctx.fillRect(0,0,canvas.width,canvas.height); }
    function draw(){ if (!ctx || !hasImage) { clearCanvas(); return; } clearCanvas(); const w = img.width * scale; const h = img.height * scale; const x = (canvas.width - w)/2 + offsetX; const y = (canvas.height - h)/2 + offsetY; ctx.drawImage(img, x, y, w, h); }
    function fitImage(){ if (!img || !canvas) return; const s = Math.min(canvas.width / img.width, canvas.height / img.height); baseScale = s; scale = s; offsetX = 0; offsetY = 0; if (zoom) zoom.value = '1'; draw(); }

    function openModal(){ if (!modal) return; modal.classList.remove('hidden'); }
    function closeModal(){ if (!modal) return; modal.classList.add('hidden'); if (fileInput) fileInput.value=''; }

    if (openBtn) openBtn.addEventListener('click', openModal);
    document.getElementById('favicon-cancel')?.addEventListener('click', closeModal);
    document.getElementById('favicon-save')?.addEventListener('click', () => {
      if (!canvas) return; const out = document.createElement('canvas'); out.width = 64; out.height = 64; const octx = out.getContext('2d'); if (!octx) return; // draw scaled down from preview
      octx.drawImage(canvas, 0, 0, out.width, out.height);
      const url = out.toDataURL('image/png');
      localStorage.setItem(FAVICON_KEY, url);
      applyFavicon(url);
      closeModal();
    });

    if (fileInput) fileInput.addEventListener('change', (e) => {
      const f = e.target.files && e.target.files[0]; if (!f) return;
      const reader = new FileReader();
      reader.onload = () => { img = new Image(); img.onload = () => { hasImage = true; fitImage(); }; img.src = reader.result; };
      reader.readAsDataURL(f);
    });

    if (zoom) zoom.addEventListener('input', () => { const z = parseFloat(zoom.value || '1'); scale = baseScale * z; draw(); });

    if (canvas){
      canvas.addEventListener('mousedown', (e) => { dragging = true; lastX = e.clientX; lastY = e.clientY; });
      window.addEventListener('mousemove', (e) => { if (!dragging) return; offsetX += (e.clientX - lastX); offsetY += (e.clientY - lastY); lastX = e.clientX; lastY = e.clientY; draw(); });
      window.addEventListener('mouseup', () => { dragging = false; });
      canvas.addEventListener('mouseleave', () => { dragging = false; });
      // Prevent image drag ghost
      canvas.addEventListener('dragstart', (e)=> e.preventDefault());
    }
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initLogic); else initLogic();
})();
// --- Users & Permissions extensions ---
const USERS_KEY = 'gamenet_users';
const PERMISSION_TABS = {
  home: { label: 'خانه', parts: ['نمایش داشبورد'] },
  users: { label: 'کاربران', parts: ['مشاهده', 'افزودن', 'ویرایش', 'حذف', 'ویرایش مجوز'] },
  branches: { label: 'شعب', parts: ['مشاهده', 'افزودن/ویرایش سیستم', 'تعرفه'] },
  settings: { label: 'تنظیمات', parts: ['مشاهده', 'امنیت', 'ظاهر'] }
};

function loadUsers(){
  try {
    const raw = localStorage.getItem(USERS_KEY);
    if (raw) return JSON.parse(raw);
  } catch {}
  const seeded = [
    { id: 'admin', code: '00000', first: 'ادمین', last: 'سیستم', phone: '', password: '', active: true, email: 'admin@example.com', permissions: { tabs: {}, parts: {} } },
    { id: genId(), code: genCode([]), first: 'کاربر', last: 'یک', phone: '09123456789', password: '1234', active: true, email: '', permissions: { tabs: {}, parts: {} } }
  ];
  saveUsers(seeded);
  return seeded;
}

function saveUsers(arr){
  localStorage.setItem(USERS_KEY, JSON.stringify(arr));
}

// Return the currently logged-in user's record (defaults to admin)
function getCurrentUser(){
  try {
    const id = localStorage.getItem(CURRENT_USER_KEY) || 'admin';
    const users = loadUsers();
    return users.find(u => u.id === id) || users.find(u => u.id === 'admin') || null;
  } catch { return null; }
}

// Show user full name beside the clock in header
function renderUserPill(){
  const el = qs('#user-pill');
  if (!el) return;
  const u = getCurrentUser();
  if (!u){ el.textContent = ''; return; }
  const full = `${u.first || ''} ${u.last || ''}`.trim() || (u.name || '');
  // Show only full name (hide initials avatar for now)
  el.innerHTML = `<span class="name">${full}</span>`;
}

function genId(){ return Math.random().toString(36).slice(2, 10); }
// Next 5-digit sequential code starting from 00001 by creation order
function genCode(existing){
  const list = Array.isArray(existing) ? existing : loadUsers();
  let max = 0;
  (list || []).forEach(u => {
    if (u && !u.email && typeof u.code === 'string' && u.code !== '00000'){
      const n = parseInt(u.code, 10);
      if (Number.isFinite(n) && n > max) max = n;
    }
  });
  const next = Math.max(0, max) + 1;
  return String(next).padStart(5, '0');
}

// Override KPI and user rendering to use localStorage-backed users
function updateKpis(){
  const users = loadUsers().filter(u => !u.email);
  const total = users.length;
  const active = users.filter(u => u.active).length;
  qs('#kpi-users') && (qs('#kpi-users').textContent = total);
  qs('#kpi-active') && (qs('#kpi-active').textContent = active);
}

function renderUsers(){
  const tbody = qs('#users-body');
  if (!tbody) return;
  tbody.innerHTML = '';
  const headRow = qs('#tab-users thead tr');
  if (headRow){ headRow.innerHTML = '<th>کد یکتا</th><th>نام و نام خانوادگی</th><th>تلفن/نام‌کاربری</th><th>وضعیت</th><th>اقدامات</th>'; }
  const users = loadUsers().filter(u => !u.email);
  users.forEach(u => {
    const tr = document.createElement('tr');
    const full = `${u.first || ''} ${u.last || ''}`.trim();
    const status = u.active ? 'فعال' : 'غیرفعال';
    tr.innerHTML = `<td>${u.code || ''}</td><td>${full}</td><td>${u.phone || ''}</td><td>${status}</td><td>
      <button class="btn" data-act="edit" data-id="${u.id}">ویرایش</button>
      <button class="btn" data-act="perm" data-id="${u.id}">مجوزها</button>
    </td>`;
    tbody.appendChild(tr);
  });
  qsa('#users-body button[data-act]')
    .forEach(b => b.addEventListener('click', () => {
      const id = b.getAttribute('data-id');
      const act = b.getAttribute('data-act');
      if (act === 'edit') openUserModalX(id);
      if (act === 'perm') openPermModal(id);
    }));
}

// Build modals and handle user CRUD and permissions
let CURRENT_EDIT_USER = null;
let CURRENT_PERM_USER = null;

function ensureUserAndPermModals(){
  // Upgrade user modal content
  const um = qs('#user-modal');
  if (um){
    const card = um.querySelector('.modal-card');
    if (card){
      card.innerHTML = `
        <h3 id="user-modal-title">افزودن کاربر</h3>
        <form id="user-form" class="form">
          <div class="grid full">
            <label class="field">
              <span>نام</span>
              <input id="user-first" type="text" required />
            </label>
            <label class="field">
              <span>نام خانوادگی</span>
              <input id="user-last" type="text" required />
            </label>
          </div>
          <div class="grid full">
            <label class="field">
              <span>تلفن/نام‌کاربری (11 رقم)</span>
              <input id="user-phone" type="text" inputmode="numeric" pattern="^\\d{11}$" placeholder="09xxxxxxxxx" required />
            </label>
            <label class="field">
              <span>کد یکتا (غیرقابل ویرایش)</span>
              <input id="user-code" type="text" inputmode="numeric" pattern="^\\d{5}$" readonly />
            </label>
          </div>
          <label class="field">
            <span>گذرواژه</span>
            <input id="user-pass" type="password" minlength="4" placeholder="******" />
          </label>
          <div class="modal-actions">
            <button type="button" class="btn" id="user-cancel">انصراف</button>
            <button type="submit" class="btn primary" id="user-save">ذخیره</button>
          </div>
          <p id="user-form-msg" class="hint"></p>
        </form>`;
    }
    qs('#user-cancel')?.addEventListener('click', () => qs('#user-modal')?.classList.add('hidden'));
    qs('#user-form')?.addEventListener('submit', onUserFormSubmitX);
    // Inject role selector and schedule button neatly if missing
    try {
      const form = qs('#user-form');
      if (form && !qs('#user-type')){
        const grid = document.createElement('div');
        grid.className = 'grid full';
        grid.innerHTML = `
          <label class="field"><span>نقش کاربر</span>
            <select id="user-type">
              <option value="manager">کاربر مدیر</option>
              <option value="operator">متصدی</option>
            </select>
          </label>
          <label class="field" id="operator-tools" style="display:none;"><span>ساعت کاری (هفتگی)</span><button type="button" id="edit-schedule" class="btn">تنظیم برنامه</button></label>`;
        // insert before password field
        const passField = qs('#user-pass')?.closest('label');
        if (passField && passField.parentElement === form){
          form.insertBefore(grid, passField);
        } else {
          form.appendChild(grid);
        }
        qs('#user-type')?.addEventListener('change', (e) => {
          const tools = qs('#operator-tools');
          if (tools) tools.style.display = (e.target.value === 'operator') ? 'block' : 'none';
        });
        // Disable working shift button and show tooltip
        const schBtn = qs('#edit-schedule');
        if (schBtn) {
          schBtn.disabled = true;
          schBtn.title = 'بزودی';
          schBtn.addEventListener('click', (ev) => { ev.preventDefault(); ev.stopPropagation(); });
        }
      }
    } catch {}
  }
  // Create permission modal if missing
  if (!qs('#perm-modal')){
    const modal = document.createElement('div');
    modal.id = 'perm-modal'; modal.className = 'modal hidden';
    modal.setAttribute('role','dialog'); modal.setAttribute('aria-modal','true');
    modal.innerHTML = `
      <div class="modal-card large">
        <h3 id="perm-modal-title">مجوزهای کاربر</h3>
        <div class="sub-layout">
          <aside class="sub-sidebar">
            <div class="sub-header">تب‌ها</div>
            <nav id="perm-subnav" class="sub-nav"></nav>
          </aside>
          <div class="sub-content">
            <div id="perm-content"></div>
            <div class="modal-actions">
              <button type="button" class="btn" id="perm-cancel">انصراف</button>
              <button type="button" class="btn primary" id="perm-save">ذخیره</button>
            </div>
            <p id="perm-msg" class="hint"></p>
          </div>
      </div>`;
    document.body.appendChild(modal);
  }
  qs('#perm-cancel')?.addEventListener('click', () => qs('#perm-modal')?.classList.add('hidden'));
  qs('#perm-save')?.addEventListener('click', savePermsFromModal);
}

function openUserModalX(id){
  const users = loadUsers();
  const isEdit = !!id; CURRENT_EDIT_USER = id || null;
  const title = qs('#user-modal-title'); if (title) title.textContent = isEdit ? 'ویرایش کاربر' : 'افزودن کاربر';
  const f = qs('#user-first'), l = qs('#user-last'), p = qs('#user-phone'), c = qs('#user-code'), pw = qs('#user-pass');
  const typeSel = qs('#user-type'); const tools = qs('#operator-tools'); if (tools) tools.style.display = 'none';
  const msg = qs('#user-form-msg'); if (msg) msg.textContent = '';
  if (isEdit){
    const u = users.find(x => x.id === id); if (!u) return;
    f.value = u.first || ''; l.value = u.last || ''; p.value = u.phone || '';
    c.value = u.code || ''; pw.value = '';
    if (typeSel) typeSel.value = u.type || 'operator';
    if (tools) tools.style.display = ((u.type||'operator') === 'operator') ? 'block' : 'none';
  } else {
    f.value = ''; l.value = ''; p.value = '';
    c.value = genCode(users); pw.value = '';
    if (typeSel) typeSel.value = 'operator';
    if (tools) tools.style.display = 'block';
  }
  qs('#user-modal')?.classList.remove('hidden');
}

function onUserFormSubmitX(e){
  e.preventDefault();
  const first = qs('#user-first').value.trim();
  const last = qs('#user-last').value.trim();
  const phone = qs('#user-phone').value.trim();
  const code = qs('#user-code').value.trim();
  const pass = qs('#user-pass').value;
  const type = (qs('#user-type')?.value) || 'operator';
  const msg = qs('#user-form-msg');
  if (!first || !last){ msg && (msg.textContent = 'نام و نام خانوادگی الزامی است.'); return; }
  if (!/^\d{11}$/.test(phone)){ msg && (msg.textContent = 'شماره تلفن باید ۱۱ رقم باشد.'); return; }
  if (!/^\d{5}$/.test(code)){ msg && (msg.textContent = 'کد باید ۵ رقمی باشد.'); return; }
  const users = loadUsers();
  if (CURRENT_EDIT_USER){
    const i = users.findIndex(u => u.id === CURRENT_EDIT_USER); if (i === -1) return;
    const old = users[i]; users[i] = { ...old, first, last, phone, type, password: pass ? pass : old.password };
  } else {
    const schedule = (type === 'operator') ? defaultWeeklySchedule(2) : null;
    users.push({ id: genId(), code, first, last, phone, password: pass || '', active: true, email: '', type, schedule, permissions: { tabs: {}, parts: {} } });
  }
  saveUsers(users); renderUsers(); updateKpis();
  qs('#user-modal')?.classList.add('hidden');
}

function openPermModal(id){
  const users = loadUsers(); const u = users.find(x => x.id === id); if (!u) return;
  CURRENT_PERM_USER = id; const sub = qs('#perm-subnav'); const con = qs('#perm-content');
  if (!sub || !con) return; sub.innerHTML = ''; con.innerHTML = '';
  const perms = normalizePermissions(u.permissions);
  Object.entries(PERMISSION_TABS).forEach(([key, def], idx) => {
    const b = document.createElement('button'); b.className = 'sub-item' + (idx===0?' active':''); b.dataset.tab = key; b.textContent = def.label; b.addEventListener('click', () => switchPermTab(key)); sub.appendChild(b);
    const pane = document.createElement('div'); pane.className = 'perm-pane' + (idx===0?'':' hidden'); pane.dataset.tab = key;
    const chkId = `perm-tab-${key}`; const selId = `perm-parts-${key}`;
    const hasTab = !!perms.tabs[key];
    pane.innerHTML = `
      <div class="perm-row">
        <label class="chk"><input type="checkbox" id="${chkId}" ${hasTab?'checked':''}/> دسترسی به تب «${def.label}»</label>
        <label class="field">
          <span>مجوز بخش‌ها</span>
          <select id="${selId}" multiple></select>
        </label>
      </div>`;
    con.appendChild(pane);
    const sel = pane.querySelector('select');
    def.parts.forEach(p => { const o = document.createElement('option'); o.value = p; o.textContent = p; if (Array.isArray(perms.parts[key]) && perms.parts[key].includes(p)) o.selected = true; sel.appendChild(o); });
  });
  qs('#perm-modal')?.classList.remove('hidden');
